" note: map <Action>(ActionID) would apply to select mode as well as normal mode; may prefer nnoremap.

" when vimrc source fails on some wonky updates:
" source ~/.dotfiles/ideavim_temporary_source.vim
source ~/.vimrc

" vim-style undo
set nooldundo
" plugins (NerdTree) {{{
" related configurations are done in vimrc - ideavim compatible
set matchit
set surround

set quickscope

set easymotion
" unsupported overwindow motions
map <Leader><Leader>f :echo 'easymotion over window motions unsupported'<CR>
map <Leader><Leader>w :echo 'easymotion over window motions unsupported'<CR>
map <Leader><Leader>j :echo 'easymotion over window motions unsupported'<CR>

set NERDTree
" }}}

" replicating unsupported vim commands with keymaps {{{

" unfortunately vim's changelist is simply not implemented in intellij / ideavim, at least not the same way

" JumpToLastChange seems to randomly remember some of the edit locations in
" the current file, then if you keep going back it will eventually bring you
" to another file you edited
" nnoremap g; :action JumpToLastChange<Enter>
map g; <Action>(JumpToLastChange)
" nnoremap g, :action JumpToNextChange<Enter>
map g, <Action>(JumpToNextChange)
map \ <Action>(JumpToLastChange)
map \| <Action>(JumpToNextChange)

" limit the ideavim's jump list to one project?
nnoremap <C-o> :action Back<cr>
nnoremap <C-i> :action Forward<cr>
vnoremap <C-o> :action Back<cr>
vnoremap <C-i> :action Forward<cr>

" replace the custom function call in vimrc - delete bookmark on current line
nnoremap m- :action ToggleBookmark<CR>

" git diff view - doesn't work for some reason
" even when typing in intellij vim normal mode: ":action PreviousDiff" doesn't work
" even though when tracking action id, that's the action ID that shows up
" see https://youtrack.jetbrains.com/issue/VIM-1611/actions-related-to-resolving-conflicts-doesnt-seem-to-work
" so just modify the "Next/Previous Difference" in intellij settings keymap
" mapped to command + [ + c and command + ] + c
nnoremap [c :action PreviousDiff<Enter>
nnoremap ]c :action NextDiff<Enter>

" note that doing :action GotoNextBookmark<Enter> in IntelliJ won't set the automatic mark ` where you're jumping from,
" so you can't do `` to go back after doing ]` like you can in vim, if you just did GoTo... 
" and that m` in normal mode won't override the automatic ` -- but the ex-command `:mark <>` can.
nnoremap ]` :mark` \| :action GotoNextBookmark<Enter>
nnoremap [` :mark` \| :action GotoPreviousBookmark<Enter>
" in vim, this moves a split to a new tab
map <C-w>T <Action>(Unsplit)

" create/move between splits; native support stopped working for some reason{{{
"nmap <C-w>l <Action>(NextSplitter)
"nmap <C-w>h <Action>(PrevSplitter)
"nmap <C-w>j <Action>(NextSplitter)
"nmap <C-w>k <Action>(PrevSplitter)
"nnoremap <C-w>s :split<Enter>
"nnoremap <C-w>v :vsplit<Enter>
"}}}

" maps to window moving in vim:
nnoremap <C-w>W :action MoveEditorToOppositeTabGroup<Enter>
nnoremap <C-w>H :action MoveEditorToOppositeTabGroup<Enter>
nnoremap <C-w>L :action MoveEditorToOppositeTabGroup<Enter>
nnoremap <C-w>J :action MoveEditorToOppositeTabGroup<Enter>
nnoremap <C-w>K :action MoveEditorToOppositeTabGroup<Enter>

" resize splits (windows in vim)
"nmap <C-w>+ <Action>(StretchSplitToBottom)
"nmap <C-w>- <Action>(StretchSplitToTop)
"nmap <C-w>< <Action>(StretchSplitToLeft)
"nmap <C-w>> <Action>(StretchSplitToRight)
"
" use the ex-command instead of action, so that you can @@ to redo
" but script-run ex-commands can't be recorded into the : register: so set it here
" and since the : can't be set, use the e register instead; e for ex-command
" @@ is mapped to @e in vimrc
" "\r" places a carriage return in the register
nmap <C-w>+ :action StretchSplitToBottom<CR>:let @e=":action StretchSplitToBottom\n"<CR>
nmap <C-w>- :action StretchSplitToTop<CR>:let @e=":action StretchSplitToTop\n"<CR>
nmap <C-w>< :action StretchSplitToLeft<CR>:let @e=":action StretchSplitToLeft\n"<CR>
nmap <C-w>> :action StretchSplitToRight<CR>:let @e=":action StretchSplitToRight\n"<CR>

" replicate vim q: to see command history
map q: :history<Enter>

" maximize current split
" | _ in vim: width; height respectively
nmap <C-w>\| :action MaximizeEditorInSplit<CR>:let @e=":action MaximizeEditorInSplit\r"<CR>
nmap <C-w>_ :action MaximizeEditorInSplit<CR>:let @e=":action MaximizeEditorInSplit\r"<CR>
" set split sizes to equal
" but uses the same toggle action in intellij
nmap <C-w>= :action MaximizeEditorInSplit<CR>:let @e=":action MaximizeEditorInSplit\r"<CR>

" }}}

" intellij-specific mappings (not in vim) {{{
" j and k next to l: where <C-l> handles clearning highlighted searches
nnoremap <C-j> :action JumpToLastWindow<CR>
nnoremap <C-k> :action RestoreDefaultLayout<CR>
" x for close: just like in NERDtree
nnoremap <C-x> :action HideAllWindows<CR>
" p for piss-off distractions
nnoremap <C-p> :action ToggleDistractionFreeMode<CR>

" default leader key is backslash \
" open (h)tml preview
nnoremap <Leader>h :action WebOpenInAction<CR>
" u for strUcture
nnoremap <Leader>u :action ActivateStructureToolWindow<CR>
" m for maven
nnoremap <Leader>m :action ActivateMavenToolWindow<CR>

" fold selection: for particular file types (e.g. ending in .txt) where custom
" regions don't work
" this is a toggle that defines and removes fold region (doing it a second
" time removes it)
map zs <Action>(CollapseSelection)
" }}}

" macro: ex-commands stored in registers - most already in vimrc {{{
" the command for deleting all java comment-only lines 
" (has this in vim but " needs to write this again for ideavim)
" but different in that this c register is not executable because
" ideavim can't call "@c" in visual mode, so you'd have to settle for
" select -> : -> <C-R>c -> enter
let @c= 'g/\v^\s*\/\//d'
"}}}

" regarding abbreviataion, convert indents {{{
" abbreviations are not yet supported by ideaVim.
" cnoreabbrev retab! action ConvertIndentsToTabs
" cnoreabbrev retab action ConvertIndentsToSpaces
" for some reason ! in ex-command mode is not recognized by ideavim
" cnoremap ret! action ConvertIndentsToTabs
" but hey! that's all right. once you set the default indentation to using tabs for Java in IntelliJ,
" doing command option L to reformat will automatically convert all space indents to tab indents.
" }}}ideavim doesn't support :wincmd (h
